// sudo apt-get install libopenal-dev

// gcc -o gb   gingle_bell.c  -lopenal -lm

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <AL/al.h>
#include <AL/alc.h>


#define DO 261.63
#define RE 293.66
#define MI 329.63
#define FA 349.23
#define SOL 392
#define LA 440
#define SI 493.88
#define MIN 0.5

ALCdevice  * openal_output_device;
ALCcontext * openal_output_context;

ALuint internal_buffer;
ALuint streaming_source[1];

int al_check_error(const char * given_label) {

    ALenum al_error;
    al_error = alGetError();

    if(AL_NO_ERROR != al_error) {

        printf("ERROR - %s  (%s)\n", alGetString(al_error), given_label);
        return al_error;
    }
    return 0;
}

void MM_init_al() {

    const char * defname = alcGetString(NULL, ALC_DEFAULT_DEVICE_SPECIFIER);

    openal_output_device  = alcOpenDevice(defname);
    openal_output_context = alcCreateContext(openal_output_device, NULL);
    alcMakeContextCurrent(openal_output_context);

    // setup buffer and source

    alGenBuffers(1, & internal_buffer);
    al_check_error("failed call to alGenBuffers");
}

void MM_exit_al() {

    ALenum errorCode = 0;

    // Stop the sources
    alSourceStopv(1, & streaming_source[0]);        //      streaming_source
    int ii;
    for (ii = 0; ii < 1; ++ii) {
        alSourcei(streaming_source[ii], AL_BUFFER, 0);
    }
    // Clean-up
    alDeleteSources(1, &streaming_source[0]);
    alDeleteBuffers(16, &streaming_source[0]);
    errorCode = alGetError();
    alcMakeContextCurrent(NULL);
    errorCode = alGetError();
    alcDestroyContext(openal_output_context);
    alcCloseDevice(openal_output_device);
}

int put_note_inbuffer(short *b, int inx, float note, float val, int samplerate)
{
  size_t stop = val*samplerate;
  int i;
  for(i=inx;i<inx+stop;i++)
    {
      b[i]=32760*sin((2.f*3.14*note)/samplerate*(i-inx));
    }
  return i;
  
}

void MM_render_one_buffer() {

    /* Fill buffer with Sine-Wave */
     float freq = 440.f;
     //float freq = 100.f;
     //float incr_freq = 0.1f;
     float incr_freq = 10.f;

    int seconds = 63;
    // unsigned sample_rate = 22050;
    unsigned sample_rate = 44100;
    double my_pi = 3.14159;
    size_t buf_size = seconds * sample_rate;

    // allocate PCM audio buffer        
    short * samples = malloc(sizeof(short) * buf_size);
    int i;
    /* ta-ta-taaa */
    i= put_note_inbuffer(samples, 0, MI, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN, 44100);
    /* ta-ta-taaa */
    i= put_note_inbuffer(samples, i, MI, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN, 44100);
    /* ta-ta-taa-ta */
    i= put_note_inbuffer(samples, i, MI, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, SOL, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, DO, MIN*3./4., 44100);
    i= put_note_inbuffer(samples, i, RE, MIN/4., 44100);
    /* taaaaaaaa*/
    i= put_note_inbuffer(samples, i, MI, MIN*2., 44100);
    /* ta-ta-taaa */
    i= put_note_inbuffer(samples, i, FA, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, FA, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, FA, MIN*3./4., 44100);
    i= put_note_inbuffer(samples, i, FA, MIN/4., 44100);
    /* ta-ta-taaa */
    i= put_note_inbuffer(samples, i, FA, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN/4., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN/4., 44100);
    /* taa taa taa taa  */
    i= put_note_inbuffer(samples, i, MI, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, RE, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, RE, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN/2., 44100);
      /* taaaa taaaa */
    i= put_note_inbuffer(samples, i, RE, MIN, 44100);
    i= put_note_inbuffer(samples, i, SOL, MIN, 44100);
    /* ta-ta-taaa */
    i= put_note_inbuffer(samples, i, MI, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN, 44100);
    /* ta-ta-taaa */
    i= put_note_inbuffer(samples, i, MI, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN, 44100);
     /* ta-ta-taa-ta */
    i= put_note_inbuffer(samples, i, MI, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, SOL, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, DO, MIN*3./4., 44100);
    i= put_note_inbuffer(samples, i, RE, MIN/4., 44100);
     /* taaaaaaaa*/
    i= put_note_inbuffer(samples, i, MI, MIN*2., 44100);
    /* taa-taa-taa-taa */
    i= put_note_inbuffer(samples, i, FA, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, FA, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, FA, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, FA, MIN/2., 44100);
     /* taa-taa-taa-ta-ta */
    i= put_note_inbuffer(samples, i, FA, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN/4., 44100);
    i= put_note_inbuffer(samples, i, MI, MIN/4., 44100);
     /* taa-taa-taa-taa */
    i= put_note_inbuffer(samples, i, SOL, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, SOL, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, FA, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, RE, MIN/2., 44100);
     /* taaaaaaaa*/
    i= put_note_inbuffer(samples, i, DO, MIN*2., 44100);

    /* inciso */
    
      /* taa-taa-taa-taa */
    i= put_note_inbuffer(samples, i, SOL, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, RE*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, DO*2, MIN/2., 44100);
     /* taaaaaaaa*/
    i= put_note_inbuffer(samples, i, SOL, MIN*2, 44100);
    /* taa-taa-taa-taa */
    i= put_note_inbuffer(samples, i, SOL, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, RE*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, DO*2, MIN/2., 44100);
     /* taaaaaaaa*/
    i= put_note_inbuffer(samples, i, LA, MIN*2, 44100);
    /* taa-taa-taa-taa */
    i= put_note_inbuffer(samples, i, LA, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, FA*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, RE*2, MIN/2., 44100);
     /* taaaaaaaa*/
    i= put_note_inbuffer(samples, i, SI, MIN*2, 44100);
    /* taa-taa-taa-taa */
    i= put_note_inbuffer(samples, i, SOL*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, SOL*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, RE*2, MIN/2., 44100);
     /* taaaaaaaa*/
    i= put_note_inbuffer(samples, i, MI*2, MIN, 44100);
    i= put_note_inbuffer(samples, i, DO*2, MIN, 44100);

    /* -------- */

    /* taa-taa-taa-taa */
    i= put_note_inbuffer(samples, i, SOL, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, RE*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, DO*2, MIN/2., 44100);
     /* taaaaaaaa*/
    i= put_note_inbuffer(samples, i, SOL, MIN*2, 44100);
    /* taa-taa-taa-taa */
    i= put_note_inbuffer(samples, i, SOL, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, RE*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, DO*2, MIN/2., 44100);
     /* taaaaaaaa*/
    i= put_note_inbuffer(samples, i, LA, MIN*2, 44100);
    /* taa-taa-taa-taa */
    i= put_note_inbuffer(samples, i, LA, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, FA*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, MI*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, RE*2, MIN/2., 44100);
     /* taaaaaaaa*/
    i= put_note_inbuffer(samples, i, SOL*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, SOL*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, SOL*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, SOL*2, MIN/2., 44100);
    /* taa-taa-taa-taa */
    i= put_note_inbuffer(samples, i, LA*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, SOL*2, MIN/2., 44100);
    i= put_note_inbuffer(samples, i, FA*2, MIN/2., 44100);
     i= put_note_inbuffer(samples, i, RE*2, MIN/2., 44100);
    /* taaaaaaaa*/
     i= put_note_inbuffer(samples, i, DO*2, MIN, 44100);
    
    
    
   /* upload buffer to OpenAL */
   alBufferData( internal_buffer, AL_FORMAT_MONO16, samples, buf_size, sample_rate);
   al_check_error("populating alBufferData");
    
   free(samples);
   
   alGenSources(1, & streaming_source[0]);
   alSourcei(streaming_source[0], AL_BUFFER, internal_buffer);
   // alSourcePlay(src);
   alSourcePlay(streaming_source[0]);
   
   // ---------------------
   
   ALenum current_playing_state;
   alGetSourcei(streaming_source[0], AL_SOURCE_STATE, & current_playing_state);
   al_check_error("alGetSourcei AL_SOURCE_STATE");
   
   while (AL_PLAYING == current_playing_state) {
               
     sleep(1);   // should use a thread sleep NOT sleep() for a more responsive finish
     
     alGetSourcei(streaming_source[0], AL_SOURCE_STATE, & current_playing_state);
     al_check_error("alGetSourcei AL_SOURCE_STATE");
   }
   
   
   /* Dealloc OpenAL */
   MM_exit_al();
   
}   //  MM_render_one_buffer

int main() {
  
  MM_init_al();
  
  MM_render_one_buffer();
}
